What happens when you initialize a repository? Why do you need to do it?
When you run 'git init' it creates the .git directory and
creates/intializes the repository.  If you don't do this then you cannot
do any commits which means you will not be taking advantage of the
 benefits of version control.

 How is the staging area different from the working directory and the
 repository? What value do you think it offers?
 The staging area is where you add files (from the working directory) that will be commited when you use the 'git commit' command.  The 
 value that this offers is that it allows you to specify what you 
 want and what you do not want in your commits.

 How can you use the staging area to make sure you have one commit per
 logical change?
 Commits can only be made from the staging area.  So, even though you
 can be working on multiple files, you can add one file or more that
 represents a logical change to the staging area and commit the files
 to the repository.  The staging area allows you to control what you
 commit to your repository and how big your commit is.

 What are some situations when branches would be helpful in keepin
 your history organized? How would branches help?
 Branches could help seperate different versions or different releases 
 of your software.  Whenever you finish a release or begin work on a
 new version of your software, it can be done on a new branch.  You can
 also use branches to experiment with the software. This allows you to
 organize what version of the software you are working on without 
 having to worry about changing other versions.

 How do the diagrams help you visualize the branch structure?
 A diagram of a repository helps you realize that the commits you make
 create a graph with no cycles.  Each node (commit) is only reachable
 from a branch (root node).  This is the case because you can always
 go back to a branch using the 'git checkout' command.  If you commit to a DETACHED HEAD without making it a branch then it will be
 unreachable in the repository graph.

 What is the result of merging two branches together? Why do we
 represent it in the diagram the way we do?
 Merging two branches combines all of the changes from both branches.  
 It was represented in a diagram to show that all of the commits from
 both branches will still be reachable from the new branch.  Remember
 to delete the second branch (git new_master_branch branch_to be
 deleted).  You are only deleting the label, not the commits.